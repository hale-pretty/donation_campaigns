scalar Long
scalar Upload

type Donation {
  id: Int!
  userId: Int!
  campaignId: Int!
  createdAt: String!
  amount: Long!
}

type Campaign {
	id: Int!
	title: String!
	description: String!
	goalAmount: Long!
	raisedAmount: Long
	startDate: String!
	endDate: String!
	status: String!
	user: User!
	images: [CampaignImage!]
}

type CampaignImage {
	id: ID!
	campaignId: ID!
	imageUrl: String!
}

input CreateCampaignRequest {
	title: String!
	description: String!
	goalAmount: Long!
	endDate: String!
	userId: Int!
	images: [Upload!]!
}

input UpdateCampaignRequest {
	id: Int!
	title: String
	description: String
	goalAmount: Long
	endDate: String
	images: [Upload]
}

type User {
	id: Int!
	username: String!
	email: String!
  firstName: String!
  lastName: String!
  avatarUrl: String
  bio: String,
	# campaigns: [Campaign]
}

input UserRegisterRequest {
  username: String!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input UpdateUserRequest {
  firstName: String
  lastName: String
  bio: String
  password: String
}

type LoginResponse {
  token: String!
}

type Query {
  getDonationsByUser: [Donation]
  getDonationsByCampaign(campaignId: Int!): [Donation]
  campaigns: [Campaign]
  campaign(id: Int!): Campaign
  getCurrentUser: User
}

type Mutation {
	createCampaign(request: CreateCampaignRequest): Campaign
	updateCampaign(request: UpdateCampaignRequest): Campaign
	deleteCampaign(id: Int!): Boolean

	createDonation(campaignId: Int!, amount: Long!): Donation!
  register(request: UserRegisterRequest): User

  login(username: String!, password: String!): LoginResponse

  addAvatar(image: Upload!): User

  updateUser(request: UpdateUserRequest): User
}
